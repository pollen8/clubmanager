// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  attendance: (where?: AttendanceWhereInput) => Promise<boolean>;
  club: (where?: ClubWhereInput) => Promise<boolean>;
  member: (where?: MemberWhereInput) => Promise<boolean>;
  season: (where?: SeasonWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attendance: (where: AttendanceWhereUniqueInput) => AttendancePromise;
  attendances: (
    args?: {
      where?: AttendanceWhereInput;
      orderBy?: AttendanceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Attendance>;
  attendancesConnection: (
    args?: {
      where?: AttendanceWhereInput;
      orderBy?: AttendanceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AttendanceConnectionPromise;
  club: (where: ClubWhereUniqueInput) => ClubPromise;
  clubs: (
    args?: {
      where?: ClubWhereInput;
      orderBy?: ClubOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Club>;
  clubsConnection: (
    args?: {
      where?: ClubWhereInput;
      orderBy?: ClubOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ClubConnectionPromise;
  member: (where: MemberWhereUniqueInput) => MemberPromise;
  members: (
    args?: {
      where?: MemberWhereInput;
      orderBy?: MemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Member>;
  membersConnection: (
    args?: {
      where?: MemberWhereInput;
      orderBy?: MemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MemberConnectionPromise;
  season: (where: SeasonWhereUniqueInput) => SeasonPromise;
  seasons: (
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Season>;
  seasonsConnection: (
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SeasonConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttendance: (data: AttendanceCreateInput) => AttendancePromise;
  updateAttendance: (
    args: { data: AttendanceUpdateInput; where: AttendanceWhereUniqueInput }
  ) => AttendancePromise;
  updateManyAttendances: (
    args: {
      data: AttendanceUpdateManyMutationInput;
      where?: AttendanceWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAttendance: (
    args: {
      where: AttendanceWhereUniqueInput;
      create: AttendanceCreateInput;
      update: AttendanceUpdateInput;
    }
  ) => AttendancePromise;
  deleteAttendance: (where: AttendanceWhereUniqueInput) => AttendancePromise;
  deleteManyAttendances: (where?: AttendanceWhereInput) => BatchPayloadPromise;
  createClub: (data: ClubCreateInput) => ClubPromise;
  updateClub: (
    args: { data: ClubUpdateInput; where: ClubWhereUniqueInput }
  ) => ClubPromise;
  updateManyClubs: (
    args: { data: ClubUpdateManyMutationInput; where?: ClubWhereInput }
  ) => BatchPayloadPromise;
  upsertClub: (
    args: {
      where: ClubWhereUniqueInput;
      create: ClubCreateInput;
      update: ClubUpdateInput;
    }
  ) => ClubPromise;
  deleteClub: (where: ClubWhereUniqueInput) => ClubPromise;
  deleteManyClubs: (where?: ClubWhereInput) => BatchPayloadPromise;
  createMember: (data: MemberCreateInput) => MemberPromise;
  updateMember: (
    args: { data: MemberUpdateInput; where: MemberWhereUniqueInput }
  ) => MemberPromise;
  updateManyMembers: (
    args: { data: MemberUpdateManyMutationInput; where?: MemberWhereInput }
  ) => BatchPayloadPromise;
  upsertMember: (
    args: {
      where: MemberWhereUniqueInput;
      create: MemberCreateInput;
      update: MemberUpdateInput;
    }
  ) => MemberPromise;
  deleteMember: (where: MemberWhereUniqueInput) => MemberPromise;
  deleteManyMembers: (where?: MemberWhereInput) => BatchPayloadPromise;
  createSeason: (data: SeasonCreateInput) => SeasonPromise;
  updateSeason: (
    args: { data: SeasonUpdateInput; where: SeasonWhereUniqueInput }
  ) => SeasonPromise;
  updateManySeasons: (
    args: { data: SeasonUpdateManyMutationInput; where?: SeasonWhereInput }
  ) => BatchPayloadPromise;
  upsertSeason: (
    args: {
      where: SeasonWhereUniqueInput;
      create: SeasonCreateInput;
      update: SeasonUpdateInput;
    }
  ) => SeasonPromise;
  deleteSeason: (where: SeasonWhereUniqueInput) => SeasonPromise;
  deleteManySeasons: (where?: SeasonWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attendance: (
    where?: AttendanceSubscriptionWhereInput
  ) => AttendanceSubscriptionPayloadSubscription;
  club: (
    where?: ClubSubscriptionWhereInput
  ) => ClubSubscriptionPayloadSubscription;
  member: (
    where?: MemberSubscriptionWhereInput
  ) => MemberSubscriptionPayloadSubscription;
  season: (
    where?: SeasonSubscriptionWhereInput
  ) => SeasonSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MembershipType = "Member" | "Guest";

export type SeasonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "visitorFee_ASC"
  | "visitorFee_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttendanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "attended_ASC"
  | "attended_DESC"
  | "clubNight_ASC"
  | "clubNight_DESC"
  | "paid_ASC"
  | "paid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MemberUpdateWithWhereUniqueNestedInput {
  where: MemberWhereUniqueInput;
  data: MemberUpdateDataInput;
}

export type AttendanceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MemberUpdateManyMutationInput {
  name?: String;
  type?: MembershipType;
}

export interface MemberUpdateManyDataInput {
  name?: String;
  type?: MembershipType;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  clubs_every?: ClubWhereInput;
  clubs_some?: ClubWhereInput;
  clubs_none?: ClubWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface SeasonUpdateDataInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  visitorFee?: Int;
}

export interface MemberUpdateInput {
  name?: String;
  type?: MembershipType;
  seasons?: SeasonUpdateManyInput;
}

export interface SeasonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SeasonWhereInput;
  AND?: SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput;
  OR?: SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput;
  NOT?: SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput;
}

export interface ClubUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface AttendanceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  attended?: Boolean;
  attended_not?: Boolean;
  clubNight?: DateTimeInput;
  clubNight_not?: DateTimeInput;
  clubNight_in?: DateTimeInput[] | DateTimeInput;
  clubNight_not_in?: DateTimeInput[] | DateTimeInput;
  clubNight_lt?: DateTimeInput;
  clubNight_lte?: DateTimeInput;
  clubNight_gt?: DateTimeInput;
  clubNight_gte?: DateTimeInput;
  member_every?: MemberWhereInput;
  member_some?: MemberWhereInput;
  member_none?: MemberWhereInput;
  paid?: Boolean;
  paid_not?: Boolean;
  AND?: AttendanceWhereInput[] | AttendanceWhereInput;
  OR?: AttendanceWhereInput[] | AttendanceWhereInput;
  NOT?: AttendanceWhereInput[] | AttendanceWhereInput;
}

export interface ClubUpdateInput {
  name?: String;
  description?: String;
}

export interface ClubSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClubWhereInput;
  AND?: ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput;
  OR?: ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput;
  NOT?: ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput;
}

export interface ClubCreateInput {
  name: String;
  description?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
}

export type ClubWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface ClubWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: ClubWhereInput[] | ClubWhereInput;
  OR?: ClubWhereInput[] | ClubWhereInput;
  NOT?: ClubWhereInput[] | ClubWhereInput;
}

export interface AttendanceCreateInput {
  attended?: Boolean;
  clubNight?: DateTimeInput;
  member?: MemberCreateManyInput;
  paid?: Boolean;
}

export interface ClubUpsertWithWhereUniqueNestedInput {
  where: ClubWhereUniqueInput;
  update: ClubUpdateDataInput;
  create: ClubCreateInput;
}

export interface MemberCreateManyInput {
  create?: MemberCreateInput[] | MemberCreateInput;
  connect?: MemberWhereUniqueInput[] | MemberWhereUniqueInput;
}

export interface ClubUpdateWithWhereUniqueNestedInput {
  where: ClubWhereUniqueInput;
  data: ClubUpdateDataInput;
}

export interface MemberCreateInput {
  name: String;
  type: MembershipType;
  seasons?: SeasonCreateManyInput;
}

export interface ClubUpdateManyInput {
  create?: ClubCreateInput[] | ClubCreateInput;
  update?:
    | ClubUpdateWithWhereUniqueNestedInput[]
    | ClubUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ClubUpsertWithWhereUniqueNestedInput[]
    | ClubUpsertWithWhereUniqueNestedInput;
  delete?: ClubWhereUniqueInput[] | ClubWhereUniqueInput;
  connect?: ClubWhereUniqueInput[] | ClubWhereUniqueInput;
  disconnect?: ClubWhereUniqueInput[] | ClubWhereUniqueInput;
  deleteMany?: ClubScalarWhereInput[] | ClubScalarWhereInput;
  updateMany?:
    | ClubUpdateManyWithWhereNestedInput[]
    | ClubUpdateManyWithWhereNestedInput;
}

export interface SeasonCreateManyInput {
  create?: SeasonCreateInput[] | SeasonCreateInput;
  connect?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
}

export interface ClubCreateManyInput {
  create?: ClubCreateInput[] | ClubCreateInput;
  connect?: ClubWhereUniqueInput[] | ClubWhereUniqueInput;
}

export interface SeasonCreateInput {
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  visitorFee?: Int;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  clubs?: ClubCreateManyInput;
}

export interface AttendanceUpdateInput {
  attended?: Boolean;
  clubNight?: DateTimeInput;
  member?: MemberUpdateManyInput;
  paid?: Boolean;
}

export interface SeasonUpdateInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  visitorFee?: Int;
}

export interface MemberUpdateManyInput {
  create?: MemberCreateInput[] | MemberCreateInput;
  update?:
    | MemberUpdateWithWhereUniqueNestedInput[]
    | MemberUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MemberUpsertWithWhereUniqueNestedInput[]
    | MemberUpsertWithWhereUniqueNestedInput;
  delete?: MemberWhereUniqueInput[] | MemberWhereUniqueInput;
  connect?: MemberWhereUniqueInput[] | MemberWhereUniqueInput;
  disconnect?: MemberWhereUniqueInput[] | MemberWhereUniqueInput;
  deleteMany?: MemberScalarWhereInput[] | MemberScalarWhereInput;
  updateMany?:
    | MemberUpdateManyWithWhereNestedInput[]
    | MemberUpdateManyWithWhereNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface AttendanceUpdateManyMutationInput {
  attended?: Boolean;
  clubNight?: DateTimeInput;
  paid?: Boolean;
}

export interface MemberWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  type?: MembershipType;
  type_not?: MembershipType;
  type_in?: MembershipType[] | MembershipType;
  type_not_in?: MembershipType[] | MembershipType;
  seasons_every?: SeasonWhereInput;
  seasons_some?: SeasonWhereInput;
  seasons_none?: SeasonWhereInput;
  AND?: MemberWhereInput[] | MemberWhereInput;
  OR?: MemberWhereInput[] | MemberWhereInput;
  NOT?: MemberWhereInput[] | MemberWhereInput;
}

export interface MemberUpdateDataInput {
  name?: String;
  type?: MembershipType;
  seasons?: SeasonUpdateManyInput;
}

export interface ClubUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface SeasonUpdateManyInput {
  create?: SeasonCreateInput[] | SeasonCreateInput;
  update?:
    | SeasonUpdateWithWhereUniqueNestedInput[]
    | SeasonUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SeasonUpsertWithWhereUniqueNestedInput[]
    | SeasonUpsertWithWhereUniqueNestedInput;
  delete?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
  connect?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
  disconnect?: SeasonWhereUniqueInput[] | SeasonWhereUniqueInput;
  deleteMany?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
  updateMany?:
    | SeasonUpdateManyWithWhereNestedInput[]
    | SeasonUpdateManyWithWhereNestedInput;
}

export interface ClubScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: ClubScalarWhereInput[] | ClubScalarWhereInput;
  OR?: ClubScalarWhereInput[] | ClubScalarWhereInput;
  NOT?: ClubScalarWhereInput[] | ClubScalarWhereInput;
}

export interface SeasonUpdateWithWhereUniqueNestedInput {
  where: SeasonWhereUniqueInput;
  data: SeasonUpdateDataInput;
}

export type MemberWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SeasonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  visitorFee?: Int;
  visitorFee_not?: Int;
  visitorFee_in?: Int[] | Int;
  visitorFee_not_in?: Int[] | Int;
  visitorFee_lt?: Int;
  visitorFee_lte?: Int;
  visitorFee_gt?: Int;
  visitorFee_gte?: Int;
  AND?: SeasonWhereInput[] | SeasonWhereInput;
  OR?: SeasonWhereInput[] | SeasonWhereInput;
  NOT?: SeasonWhereInput[] | SeasonWhereInput;
}

export type SeasonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SeasonUpsertWithWhereUniqueNestedInput {
  where: SeasonWhereUniqueInput;
  update: SeasonUpdateDataInput;
  create: SeasonCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface SeasonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  visitorFee?: Int;
  visitorFee_not?: Int;
  visitorFee_in?: Int[] | Int;
  visitorFee_not_in?: Int[] | Int;
  visitorFee_lt?: Int;
  visitorFee_lte?: Int;
  visitorFee_gt?: Int;
  visitorFee_gte?: Int;
  AND?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
  OR?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
  NOT?: SeasonScalarWhereInput[] | SeasonScalarWhereInput;
}

export interface AttendanceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AttendanceWhereInput;
  AND?: AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput;
  OR?: AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput;
  NOT?: AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput;
}

export interface SeasonUpdateManyWithWhereNestedInput {
  where: SeasonScalarWhereInput;
  data: SeasonUpdateManyDataInput;
}

export interface ClubUpdateDataInput {
  name?: String;
  description?: String;
}

export interface MemberUpdateManyWithWhereNestedInput {
  where: MemberScalarWhereInput;
  data: MemberUpdateManyDataInput;
}

export interface MemberScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  type?: MembershipType;
  type_not?: MembershipType;
  type_in?: MembershipType[] | MembershipType;
  type_not_in?: MembershipType[] | MembershipType;
  AND?: MemberScalarWhereInput[] | MemberScalarWhereInput;
  OR?: MemberScalarWhereInput[] | MemberScalarWhereInput;
  NOT?: MemberScalarWhereInput[] | MemberScalarWhereInput;
}

export interface MemberUpsertWithWhereUniqueNestedInput {
  where: MemberWhereUniqueInput;
  update: MemberUpdateDataInput;
  create: MemberCreateInput;
}

export interface SeasonUpdateManyDataInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  visitorFee?: Int;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  clubs?: ClubUpdateManyInput;
}

export interface ClubUpdateManyWithWhereNestedInput {
  where: ClubScalarWhereInput;
  data: ClubUpdateManyDataInput;
}

export interface MemberSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MemberWhereInput;
  AND?: MemberSubscriptionWhereInput[] | MemberSubscriptionWhereInput;
  OR?: MemberSubscriptionWhereInput[] | MemberSubscriptionWhereInput;
  NOT?: MemberSubscriptionWhereInput[] | MemberSubscriptionWhereInput;
}

export interface SeasonUpdateManyMutationInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  visitorFee?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ClubConnection {
  pageInfo: PageInfo;
  edges: ClubEdge[];
}

export interface ClubConnectionPromise
  extends Promise<ClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClubEdge>>() => T;
  aggregate: <T = AggregateClubPromise>() => T;
}

export interface ClubConnectionSubscription
  extends Promise<AsyncIterator<ClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClubSubscription>() => T;
}

export interface SeasonSubscriptionPayload {
  mutation: MutationType;
  node: Season;
  updatedFields: String[];
  previousValues: SeasonPreviousValues;
}

export interface SeasonSubscriptionPayloadPromise
  extends Promise<SeasonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeasonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeasonPreviousValuesPromise>() => T;
}

export interface SeasonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeasonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeasonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeasonPreviousValuesSubscription>() => T;
}

export interface SeasonPreviousValues {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  visitorFee?: Int;
}

export interface SeasonPreviousValuesPromise
  extends Promise<SeasonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  visitorFee: () => Promise<Int>;
}

export interface SeasonPreviousValuesSubscription
  extends Promise<AsyncIterator<SeasonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  visitorFee: () => Promise<AsyncIterator<Int>>;
}

export interface Club {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface ClubPromise extends Promise<Club>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClubSubscription
  extends Promise<AsyncIterator<Club>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAttendance {
  count: Int;
}

export interface AggregateAttendancePromise
  extends Promise<AggregateAttendance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttendanceSubscription
  extends Promise<AsyncIterator<AggregateAttendance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AttendanceEdge {
  node: Attendance;
  cursor: String;
}

export interface AttendanceEdgePromise
  extends Promise<AttendanceEdge>,
    Fragmentable {
  node: <T = AttendancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttendanceEdgeSubscription
  extends Promise<AsyncIterator<AttendanceEdge>>,
    Fragmentable {
  node: <T = AttendanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  clubs: <T = FragmentableArray<Club>>(
    args?: {
      where?: ClubWhereInput;
      orderBy?: ClubOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  clubs: <T = Promise<AsyncIterator<ClubSubscription>>>(
    args?: {
      where?: ClubWhereInput;
      orderBy?: ClubOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SeasonEdge {
  node: Season;
  cursor: String;
}

export interface SeasonEdgePromise extends Promise<SeasonEdge>, Fragmentable {
  node: <T = SeasonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeasonEdgeSubscription
  extends Promise<AsyncIterator<SeasonEdge>>,
    Fragmentable {
  node: <T = SeasonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Attendance {
  id: ID_Output;
  attended?: Boolean;
  clubNight?: DateTimeOutput;
  paid?: Boolean;
}

export interface AttendancePromise extends Promise<Attendance>, Fragmentable {
  id: () => Promise<ID_Output>;
  attended: () => Promise<Boolean>;
  clubNight: () => Promise<DateTimeOutput>;
  member: <T = FragmentableArray<Member>>(
    args?: {
      where?: MemberWhereInput;
      orderBy?: MemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  paid: () => Promise<Boolean>;
}

export interface AttendanceSubscription
  extends Promise<AsyncIterator<Attendance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attended: () => Promise<AsyncIterator<Boolean>>;
  clubNight: () => Promise<AsyncIterator<DateTimeOutput>>;
  member: <T = Promise<AsyncIterator<MemberSubscription>>>(
    args?: {
      where?: MemberWhereInput;
      orderBy?: MemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  paid: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateMember {
  count: Int;
}

export interface AggregateMemberPromise
  extends Promise<AggregateMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMemberSubscription
  extends Promise<AsyncIterator<AggregateMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttendanceSubscriptionPayload {
  mutation: MutationType;
  node: Attendance;
  updatedFields: String[];
  previousValues: AttendancePreviousValues;
}

export interface AttendanceSubscriptionPayloadPromise
  extends Promise<AttendanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttendancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttendancePreviousValuesPromise>() => T;
}

export interface AttendanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttendanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttendanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttendancePreviousValuesSubscription>() => T;
}

export interface MemberConnection {
  pageInfo: PageInfo;
  edges: MemberEdge[];
}

export interface MemberConnectionPromise
  extends Promise<MemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MemberEdge>>() => T;
  aggregate: <T = AggregateMemberPromise>() => T;
}

export interface MemberConnectionSubscription
  extends Promise<AsyncIterator<MemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMemberSubscription>() => T;
}

export interface AttendancePreviousValues {
  id: ID_Output;
  attended?: Boolean;
  clubNight?: DateTimeOutput;
  paid?: Boolean;
}

export interface AttendancePreviousValuesPromise
  extends Promise<AttendancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attended: () => Promise<Boolean>;
  clubNight: () => Promise<DateTimeOutput>;
  paid: () => Promise<Boolean>;
}

export interface AttendancePreviousValuesSubscription
  extends Promise<AsyncIterator<AttendancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attended: () => Promise<AsyncIterator<Boolean>>;
  clubNight: () => Promise<AsyncIterator<DateTimeOutput>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClubEdge {
  node: Club;
  cursor: String;
}

export interface ClubEdgePromise extends Promise<ClubEdge>, Fragmentable {
  node: <T = ClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClubEdgeSubscription
  extends Promise<AsyncIterator<ClubEdge>>,
    Fragmentable {
  node: <T = ClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AttendanceConnection {
  pageInfo: PageInfo;
  edges: AttendanceEdge[];
}

export interface AttendanceConnectionPromise
  extends Promise<AttendanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttendanceEdge>>() => T;
  aggregate: <T = AggregateAttendancePromise>() => T;
}

export interface AttendanceConnectionSubscription
  extends Promise<AsyncIterator<AttendanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttendanceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttendanceSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClubSubscriptionPayload {
  mutation: MutationType;
  node: Club;
  updatedFields: String[];
  previousValues: ClubPreviousValues;
}

export interface ClubSubscriptionPayloadPromise
  extends Promise<ClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClubPreviousValuesPromise>() => T;
}

export interface ClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClubPreviousValuesSubscription>() => T;
}

export interface AggregateSeason {
  count: Int;
}

export interface AggregateSeasonPromise
  extends Promise<AggregateSeason>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeasonSubscription
  extends Promise<AsyncIterator<AggregateSeason>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MemberEdge {
  node: Member;
  cursor: String;
}

export interface MemberEdgePromise extends Promise<MemberEdge>, Fragmentable {
  node: <T = MemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MemberEdgeSubscription
  extends Promise<AsyncIterator<MemberEdge>>,
    Fragmentable {
  node: <T = MemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MemberPreviousValues {
  id: ID_Output;
  name: String;
  type: MembershipType;
}

export interface MemberPreviousValuesPromise
  extends Promise<MemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<MembershipType>;
}

export interface MemberPreviousValuesSubscription
  extends Promise<AsyncIterator<MemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<MembershipType>>;
}

export interface MemberSubscriptionPayload {
  mutation: MutationType;
  node: Member;
  updatedFields: String[];
  previousValues: MemberPreviousValues;
}

export interface MemberSubscriptionPayloadPromise
  extends Promise<MemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MemberPreviousValuesPromise>() => T;
}

export interface MemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MemberPreviousValuesSubscription>() => T;
}

export interface Season {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  visitorFee?: Int;
}

export interface SeasonPromise extends Promise<Season>, Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  visitorFee: () => Promise<Int>;
}

export interface SeasonSubscription
  extends Promise<AsyncIterator<Season>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  visitorFee: () => Promise<AsyncIterator<Int>>;
}

export interface ClubPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface ClubPreviousValuesPromise
  extends Promise<ClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClubPreviousValuesSubscription
  extends Promise<AsyncIterator<ClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClub {
  count: Int;
}

export interface AggregateClubPromise
  extends Promise<AggregateClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClubSubscription
  extends Promise<AsyncIterator<AggregateClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeasonConnection {
  pageInfo: PageInfo;
  edges: SeasonEdge[];
}

export interface SeasonConnectionPromise
  extends Promise<SeasonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeasonEdge>>() => T;
  aggregate: <T = AggregateSeasonPromise>() => T;
}

export interface SeasonConnectionSubscription
  extends Promise<AsyncIterator<SeasonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeasonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeasonSubscription>() => T;
}

export interface Member {
  id: ID_Output;
  name: String;
  type: MembershipType;
}

export interface MemberPromise extends Promise<Member>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<MembershipType>;
  seasons: <T = FragmentableArray<Season>>(
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MemberSubscription
  extends Promise<AsyncIterator<Member>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<MembershipType>>;
  seasons: <T = Promise<AsyncIterator<SeasonSubscription>>>(
    args?: {
      where?: SeasonWhereInput;
      orderBy?: SeasonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Attendance",
    embedded: false
  },
  {
    name: "Club",
    embedded: false
  },
  {
    name: "Member",
    embedded: false
  },
  {
    name: "MembershipType",
    embedded: false
  },
  {
    name: "Season",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
