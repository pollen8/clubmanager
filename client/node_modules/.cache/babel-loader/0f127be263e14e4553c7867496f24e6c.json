{"ast":null,"code":"import _slicedToArray from \"/home/rob/personal/clubmanager/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nexport var useDropdown = function useDropdown(trigger) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dropdownVisible = _useState2[0],\n      setDropdownVisible = _useState2[1];\n\n  useEffect(function () {\n    var close = function close(e) {\n      if (!trigger.current) {\n        return;\n      }\n\n      if (e.path.indexOf(trigger.current) !== -1) {\n        return;\n      }\n\n      setDropdownVisible(false);\n    };\n\n    document.addEventListener('click', close);\n    return function () {\n      document.removeEventListener('click', close);\n    };\n  }, []);\n  return [dropdownVisible, setDropdownVisible];\n};","map":{"version":3,"sources":["/home/rob/personal/clubmanager/client/src/app/hooks/dropdown.ts"],"names":["useEffect","useState","useDropdown","trigger","dropdownVisible","setDropdownVisible","close","e","current","path","indexOf","document","addEventListener","removeEventListener"],"mappings":";AAAA,SAGEA,SAHF,EAIEC,QAJF,QAMO,OANP;AAQA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAkF;AAAA,kBAC7DF,QAAQ,CAAU,KAAV,CADqD;AAAA;AAAA,MACpGG,eADoG;AAAA,MACnFC,kBADmF;;AAG3GL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMM,KAAK,GAAG,SAARA,KAAQ,CAACC,CAAD,EAAY;AACxB,UAAI,CAACJ,OAAO,CAACK,OAAb,EAAsB;AACpB;AACD;;AACD,UAAID,CAAC,CAACE,IAAF,CAAOC,OAAP,CAAeP,OAAO,CAACK,OAAvB,MAAoC,CAAC,CAAzC,EAA4C;AAC1C;AACD;;AACDH,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KARD;;AASAM,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,KAAnC;AACA,WAAO,YAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCP,KAAtC;AACD,KAFD;AAID,GAfQ,EAeN,EAfM,CAAT;AAkBA,SAAO,CAACF,eAAD,EAAkBC,kBAAlB,CAAP;AACD,CAtBM","sourcesContent":["import {\n  Dispatch,\n  SetStateAction,\n  useEffect,\n  useState,\n  MutableRefObject,\n} from 'react';\n\nexport const useDropdown = (trigger: MutableRefObject<any>): [boolean, Dispatch<SetStateAction<boolean>>] => {\n  const [dropdownVisible, setDropdownVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const close = (e: any) => {\n      if (!trigger.current) {\n        return;\n      }\n      if (e.path.indexOf(trigger.current) !== -1) {\n        return;\n      }\n      setDropdownVisible(false);\n    };\n    document.addEventListener('click', close);\n    return () => {\n      document.removeEventListener('click', close);\n    };\n\n  }, []);\n\n\n  return [dropdownVisible, setDropdownVisible];\n}"]},"metadata":{},"sourceType":"module"}