{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import Parse from 'parse';\n// import {\n//   useEffect,\n//   useState,\n// } from 'react';\n\n// import { ISearch } from './components/Filter';\n\nexport type IMembershipType = '' | 'member' | 'guest';\nexport interface IMember {\n  createdAt?: Date;\n  id: string;\n  name: string;\n  membership: IMembershipType;\n  updatedAt?: Date;\n  season: any;\n}\n\n// const MemberConnection = Parse.Object.extend('Member');\n\n// const sortByName = (a: IMember, b: IMember) => a.name > b.name\n//   ? 1\n//   : a.name < b.name\n//     ? -1 : 0;\n\n// export const memberState = (search: ISearch) => {\n//   const [members, setMembers] = useState<IMember[]>([]);\n\n//   useEffect(() => {\n//     (async () => {\n//       const query = new Parse.Query(MemberConnection);\n//       if (search.name !== '') {\n//         query.matches('name', new RegExp(search.name), 'i');\n//       }\n//       console.log('search.membership', search.membership);\n//       if (search.membership !== '') {\n//         query.contains('membership', search.membership);\n//       }\n//       if (search.season !== '') {\n//         console.log('season', search.season.id);\n//         query.equalTo('seasonPointer', { '__type': 'Pointer', 'className': '_User', 'objectId': search.season.id });\n//         // @ts-ignore\n//         // query.containedBy('season', search.season);\n//       }\n//       query.include('season');\n//       const results = await query.find();\n//       setMembers(results.map((result: any): IMember => {\n//         console.log('result', result, result.get('season'));\n//         return {\n//           createdAt: result.createdAt,\n//           name: result.get('name'),\n//           membership: result.get('membership'),\n//           id: result.id,\n//           updatedAt: result.updatedAt,\n//           season: result.get('season').query().find(),\n//         }\n//       }));\n//     })()\n//   }, [search]);\n\n\n//   return {\n//     members,\n//     addMember: async (member: IMember) => {\n//       try {\n//         const memberConnection = new MemberConnection();\n//         const newMember = await memberConnection.save(member);\n//         member.id = newMember.id;\n//         setMembers([...members, member].sort(sortByName));\n//       } catch (error) {\n//         alert('Failed to create new object, with error code: ' + error.message);\n//       }\n//     },\n//     deleteMember: async (id: string) => {\n//       try {\n//         const query = new Parse.Query(MemberConnection);\n//         const member = await query.get(id);\n//         member.destroy();\n//         const newMembers = members\n//           .filter((member) => member.id !== id);\n//         setMembers(newMembers);\n//       } catch (error) {\n//         alert('Failed to delete: ' + error.message);\n//       }\n//     },\n//     editMember: async (member: IMember) => {\n//       try {\n//         const memberConnection = new MemberConnection();\n//         const updated = await memberConnection.save(member);\n//         // @TODO insert updated into members\n//         setMembers([...members].sort(sortByName));\n//       } catch (error) {\n//         alert('Failed to create new object, with error code: ' + error.message);\n//       }\n\n//     },\n//   };\n// };"]},"metadata":{},"sourceType":"module"}