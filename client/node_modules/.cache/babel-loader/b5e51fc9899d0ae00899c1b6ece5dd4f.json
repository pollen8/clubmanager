{"ast":null,"code":"import _objectSpread from \"/home/rob/personal/clubmanager/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/rob/personal/clubmanager/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/rob/personal/clubmanager/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/rob/personal/clubmanager/client/src/Season/components/SeasonForm.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation AddSeason($startDate: String!, $endDate: String!, $visitorFee: Int) {\\n    addSeason(startDate: $startDate, endDate: $endDate, visitorFee: $visitorFee) {\\n      id,\\n      startDate,\\n      endDate,\\n      visitorFee,\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport React, { useEffect, useState } from 'react';\nimport { useMutation } from 'react-apollo-hooks';\nimport DatePicker from 'react-date-picker';\nimport { IoIosAddCircle } from 'react-icons/io';\nimport { Button, CardBody, FormGroup, Input, Label, ModalFooter, SlidePanelBody } from '../../app/components/Layout';\nimport { FILTER_SEASONS } from '../Season';\nvar endDate = new Date();\nendDate.setFullYear(new Date().getFullYear() + 1);\nvar blank = {\n  startDate: new Date(),\n  endDate: endDate,\n  id: '',\n  visitorFee: '7'\n};\nvar ADD_SEASON = gql(_templateObject());\nexport var SeasonForm = function SeasonForm(_ref) {\n  var initialData = _ref.initialData,\n      setSelected = _ref.setSelected;\n\n  var _useState = useState(blank),\n      _useState2 = _slicedToArray(_useState, 2),\n      season = _useState2[0],\n      setSeason = _useState2[1];\n\n  useEffect(function () {\n    if (initialData !== null) {\n      setSeason(initialData);\n    } else {\n      setSeason(blank);\n    }\n  }, [initialData]);\n  var addSeason = useMutation(ADD_SEASON, {\n    update: function update(cache, _ref2) {\n      var addSeason = _ref2.data.addSeason;\n      var c = cache.readQuery({\n        query: FILTER_SEASONS\n      });\n      console.log('cache', c);\n      var filterSeasons = c.filterSeasons;\n      var i = filterSeasons.findIndex(function (season) {\n        return season.id === addSeason.id;\n      });\n      var data = i === -1 ? filterSeasons.concat([addSeason]) : filterSeasons.map(function (season) {\n        return season.id === addSeason.id ? addSeason : season;\n      });\n      cache.writeQuery({\n        query: FILTER_SEASONS,\n        data: {\n          filterSeasons: data\n        }\n      });\n    }\n  });\n  return React.createElement(SlidePanelBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Start date\"), React.createElement(DatePicker, {\n    value: season.startDate,\n    onChange: function onChange(v) {\n      var startDate = Array.isArray(v) ? v[0] : v;\n      setSeason(_objectSpread({}, season, {\n        startDate: startDate\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"End date\"), React.createElement(DatePicker, {\n    value: season.endDate,\n    onChange: function onChange(v) {\n      var endDate = Array.isArray(v) ? v[0] : v;\n      setSeason(_objectSpread({}, season, {\n        endDate: endDate\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"visitorFee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Visitor fee\"), React.createElement(Input, {\n    name: \"visitorFee\",\n    id: \"visitorFee\",\n    value: String(season.visitorFee),\n    onChange: function onChange(e) {\n      return setSeason(_objectSpread({}, season, {\n        visitorFee: e.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Button, {\n    outline: true,\n    onClick: function onClick() {\n      return setSelected(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Clear\"), React.createElement(Button, {\n    onClick: function onClick() {\n      console.log('season', season);\n      var variables = {\n        startDate: season.startDate,\n        endDate: season.endDate,\n        visitorFee: Number(season.visitorFee)\n      }; // season.id === ''\n      //   ? addSeason({ variables })\n      //   : editSeason({ variables, id: season.id })\n      //   ;\n\n      addSeason({\n        variables: variables\n      });\n      setSeason(blank);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(IoIosAddCircle, {\n    size: \"1rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), initialData === null ? 'Add' : 'Update')));\n};","map":{"version":3,"sources":["/home/rob/personal/clubmanager/client/src/Season/components/SeasonForm.tsx"],"names":["gql","React","useEffect","useState","useMutation","DatePicker","IoIosAddCircle","Button","CardBody","FormGroup","Input","Label","ModalFooter","SlidePanelBody","FILTER_SEASONS","endDate","Date","setFullYear","getFullYear","blank","startDate","id","visitorFee","ADD_SEASON","SeasonForm","initialData","setSelected","season","setSeason","addSeason","update","cache","data","c","readQuery","query","console","log","filterSeasons","i","findIndex","concat","map","writeQuery","v","Array","isArray","String","e","target","value","variables","Number"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport React, {\n  FC,\n  useEffect,\n  useState,\n} from 'react';\nimport { Mutation } from 'react-apollo';\nimport { useMutation } from 'react-apollo-hooks';\nimport DatePicker from 'react-date-picker';\nimport { IoIosAddCircle } from 'react-icons/io';\n\nimport {\n  Button,\n  CardBody,\n  FormGroup,\n  Input,\n  Label,\n  ModalFooter,\n  SlidePanelBody,\n} from '../../app/components/Layout';\nimport { FILTER_SEASONS } from '../Season';\nimport { ISeason } from '../seasonState';\n\ninterface IProps {\n  initialData: null | ISeason;\n  setSelected: any;\n}\n\nconst endDate = new Date();\nendDate.setFullYear(new Date().getFullYear() + 1);\nconst blank: ISeason = {\n  startDate: new Date(),\n  endDate,\n  id: '',\n  visitorFee: '7',\n};\n\nconst ADD_SEASON = gql`\n  mutation AddSeason($startDate: String!, $endDate: String!, $visitorFee: Int) {\n    addSeason(startDate: $startDate, endDate: $endDate, visitorFee: $visitorFee) {\n      id,\n      startDate,\n      endDate,\n      visitorFee,\n    }\n  }\n`;\n\nexport const SeasonForm: FC<IProps> = ({ initialData, setSelected }) => {\n  const [season, setSeason] = useState<ISeason>(blank);\n\n  useEffect(() => {\n    if (initialData !== null) {\n      setSeason(initialData);\n    } else {\n      setSeason(blank);\n    }\n  }, [initialData]);\n\n  const addSeason = useMutation(ADD_SEASON, {\n    update: (cache, { data: { addSeason } }) => {\n      const c = cache.readQuery<any>({ query: FILTER_SEASONS });\n      console.log('cache', c);\n      const { filterSeasons } = c;\n      const i = filterSeasons.findIndex((season: any) => season.id === addSeason.id);\n      const data = i === -1\n        ? filterSeasons.concat([addSeason])\n        : filterSeasons.map((season: any) => season.id === addSeason.id ? addSeason : season);\n      cache.writeQuery({\n        query: FILTER_SEASONS,\n        data: { filterSeasons: data },\n      });\n    }\n  });\n  return (\n\n    <SlidePanelBody>\n      <CardBody>\n        <FormGroup>\n          <Label>Start date</Label>\n          <DatePicker\n            value={season.startDate}\n            onChange={(v) => {\n              const startDate = Array.isArray(v) ? v[0] : v;\n              setSeason({\n                ...season,\n                startDate,\n              })\n            }}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label>\n            End date\n              </Label>\n          <DatePicker\n            value={season.endDate}\n            onChange={(v) => {\n              const endDate = Array.isArray(v) ? v[0] : v;\n              setSeason({\n                ...season,\n                endDate,\n              })\n            }}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label htmlFor=\"visitorFee\">\n            Visitor fee\n              </Label>\n          <Input name=\"visitorFee\"\n            id=\"visitorFee\"\n            value={String(season.visitorFee)}\n            onChange={(e) => setSeason({\n              ...season,\n              visitorFee: e.target.value,\n            })} />\n        </FormGroup>\n\n      </CardBody>\n      <ModalFooter>\n        <Button\n          outline\n          onClick={() => setSelected(null)}>\n          Clear\n         </Button>\n\n        <Button\n          onClick={() => {\n            console.log('season', season);\n            const variables = { startDate: season.startDate, endDate: season.endDate, visitorFee: Number(season.visitorFee) };\n            // season.id === ''\n            //   ? addSeason({ variables })\n            //   : editSeason({ variables, id: season.id })\n            //   ;\n            addSeason({ variables });\n            setSeason(blank);\n          }}>\n          <IoIosAddCircle size=\"1rem\" />\n          {initialData === null ? 'Add' : 'Update'}\n        </Button>\n      </ModalFooter>\n    </SlidePanelBody>\n\n  )\n}"]},"metadata":{},"sourceType":"module"}