{"ast":null,"code":"import _classCallCheck from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js'; // import Parse from 'parse';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'bhp.eu.auth0.com',\n      clientID: 'kNgXEPRYCGsdlTlrZnPZGtK7GeDRgnbu',\n      redirectUri: \"\".concat(document.location.origin, \"/callback\"),\n      audience: 'https://bhp.eu.auth0.com/userinfo',\n      responseType: 'token id_token',\n      scope: 'openid email'\n    });\n    this.authFlag = '';\n    this.idToken = '';\n    this.expiresAt = 0;\n    this.authFlag = 'isLoggedIn';\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          if (err) return reject(err);\n\n          if (!authResult || !authResult.idToken) {\n            return reject(err);\n          }\n\n          _this.setSession(authResult);\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      this.idToken = authResult.idToken; // set the time that the id token will expire at\n\n      this.expiresAt = authResult.expiresIn ? authResult.expiresIn * 1000 + new Date().getTime() : 0;\n      localStorage.setItem(this.authFlag, JSON.stringify(true));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      localStorage.setItem(this.authFlag, JSON.stringify(false));\n      this.auth0.logout({\n        returnTo: 'http://localhost:3000',\n        clientID: 'D1lahFIpV82Mum7TimXgG0WPxpP8suGo'\n      });\n    }\n  }, {\n    key: \"silentAuth\",\n    value: function silentAuth() {\n      var _this2 = this;\n\n      if (this.isAuthenticated()) {\n        return new Promise(function (resolve, reject) {\n          _this2.auth0.checkSession({}, function (err, authResult) {\n            if (err) {\n              localStorage.removeItem(_this2.authFlag);\n              return reject(err);\n            }\n\n            _this2.setSession(authResult);\n\n            resolve();\n          });\n        });\n      }\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the token's expiry time\n      //return new Date().getTime() < this.expiresAt;\n      return JSON.parse(String(localStorage.getItem(this.authFlag)));\n    }\n  }]);\n\n  return Auth;\n}();\n\nvar auth = new Auth();\nexport default auth;","map":{"version":3,"sources":["/home/rob/personal/cra-test/src/Auth/Auth.ts"],"names":["auth0","Auth","WebAuth","domain","clientID","redirectUri","document","location","origin","audience","responseType","scope","authFlag","idToken","expiresAt","login","bind","logout","handleAuthentication","isAuthenticated","authorize","Promise","resolve","reject","parseHash","err","authResult","setSession","expiresIn","Date","getTime","localStorage","setItem","JSON","stringify","returnTo","checkSession","removeItem","parse","String","getItem","auth"],"mappings":"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","sourcesContent":["import auth0, {\n  Auth0DecodedHash,\n  Auth0UserProfile,\n} from 'auth0-js';\n\n// import Parse from 'parse';\nimport history from '../history';\n\nclass Auth {\n\n  auth0 = new auth0.WebAuth({\n    domain: 'bhp.eu.auth0.com',\n    clientID: 'kNgXEPRYCGsdlTlrZnPZGtK7GeDRgnbu',\n    redirectUri: `${document.location!.origin}/callback`,\n    audience: 'https://bhp.eu.auth0.com/userinfo',\n    responseType: 'token id_token',\n    scope: 'openid email'\n  })\n\n  authFlag: string = '';\n  idToken: string | undefined = '';\n  expiresAt = 0;\n\n  constructor() {\n    this.authFlag = 'isLoggedIn';\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n        this.setSession(authResult);\n        resolve();\n      });\n    })\n  }\n\n  setSession(authResult: Auth0DecodedHash) {\n    this.idToken = authResult.idToken;\n    // set the time that the id token will expire at\n    this.expiresAt = authResult.expiresIn\n      ? authResult.expiresIn * 1000 + new Date().getTime()\n      : 0;\n    localStorage.setItem(this.authFlag, JSON.stringify(true));\n  }\n\n  logout() {\n    localStorage.setItem(this.authFlag, JSON.stringify(false));\n    this.auth0.logout({\n      returnTo: 'http://localhost:3000',\n      clientID: 'D1lahFIpV82Mum7TimXgG0WPxpP8suGo',\n    });\n  }\n\n  silentAuth() {\n    if (this.isAuthenticated()) {\n      return new Promise((resolve, reject) => {\n        this.auth0.checkSession({}, (err, authResult) => {\n          if (err) {\n            localStorage.removeItem(this.authFlag);\n            return reject(err);\n          }\n          this.setSession(authResult);\n          resolve();\n        });\n      });\n    }\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the token's expiry time\n    //return new Date().getTime() < this.expiresAt;\n    return JSON.parse(String(localStorage.getItem(this.authFlag)));\n  }\n}\n\nconst auth = new Auth();\n\nexport default auth;"]},"metadata":{},"sourceType":"module"}