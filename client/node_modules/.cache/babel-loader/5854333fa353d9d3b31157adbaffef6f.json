{"ast":null,"code":"import _toConsumableArray from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport Parse from 'parse';\nimport { useEffect, useState } from 'react';\nvar SeasonConnection = Parse.Object.extend('Season');\nvar query = new Parse.Query(SeasonConnection);\nexport var seasonState = function seasonState() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      seasons = _useState2[0],\n      setSeasons = _useState2[1];\n\n  useEffect(function () {\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var query, res, ses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = new Parse.Query('Season');\n              _context.next = 3;\n              return query.find();\n\n            case 3:\n              res = _context.sent;\n              ses = res.map(function (r) {\n                return {\n                  createdAt: r.createdAt,\n                  startDate: r.get('startDate'),\n                  endDate: r.get('endDate'),\n                  visitorFee: r.get('visitorFee'),\n                  id: r.id,\n                  updatedAt: r.updatedAt\n                };\n              });\n              setSeasons(ses);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }))();\n  }, []);\n  return {\n    seasons: seasons,\n    addSeason: function () {\n      var _addSeason = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(season) {\n        var seasonConnection, newSeason;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                season.visitorFee = parseFloat(String(season.visitorFee));\n                seasonConnection = new SeasonConnection();\n                _context2.next = 5;\n                return seasonConnection.save(season);\n\n              case 5:\n                newSeason = _context2.sent;\n                season.id = newSeason.id;\n                setSeasons([].concat(_toConsumableArray(seasons), [season]));\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                alert('Failed to create new object, with error code: ' + _context2.t0.message);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n\n      function addSeason(_x) {\n        return _addSeason.apply(this, arguments);\n      }\n\n      return addSeason;\n    }(),\n    deleteSeason: function () {\n      var _deleteSeason = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var season, newSeasons;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return query.get(id);\n\n              case 3:\n                season = _context3.sent;\n                season.destroy();\n                newSeasons = seasons.filter(function (season) {\n                  return season.id !== id;\n                });\n                setSeasons(newSeasons);\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n                alert('Failed to delete: ' + _context3.t0.message);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n\n      function deleteSeason(_x2) {\n        return _deleteSeason.apply(this, arguments);\n      }\n\n      return deleteSeason;\n    }(),\n    editSeason: function () {\n      var _editSeason = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(season) {\n        var seasonConnection, newSeasons;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                season.visitorFee = parseFloat(String(season.visitorFee));\n                seasonConnection = new SeasonConnection();\n                _context4.next = 5;\n                return seasonConnection.save(season);\n\n              case 5:\n                newSeasons = seasons.map(function (s) {\n                  if (s.id === season.id) {\n                    return season;\n                  }\n\n                  return s;\n                });\n                setSeasons(newSeasons);\n                _context4.next = 12;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](0);\n                alert('Failed to create new object, with error code: ' + _context4.t0.message);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 9]]);\n      }));\n\n      function editSeason(_x3) {\n        return _editSeason.apply(this, arguments);\n      }\n\n      return editSeason;\n    }()\n  };\n};","map":{"version":3,"sources":["/home/rob/personal/cra-test/src/Season/seasonState.ts"],"names":["Parse","useEffect","useState","SeasonConnection","Object","extend","query","Query","seasonState","seasons","setSeasons","find","res","ses","map","r","createdAt","startDate","get","endDate","visitorFee","id","updatedAt","addSeason","season","parseFloat","String","seasonConnection","save","newSeason","alert","message","deleteSeason","destroy","newSeasons","filter","editSeason","s"],"mappings":"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","sourcesContent":["import Parse from 'parse';\nimport {\n  useEffect,\n  useState,\n} from 'react';\n\nexport interface ISeason {\n  id: string;\n  createdAt?: Date,\n  updatedAt?: Date,\n  startDate: Date,\n  endDate: Date,\n  visitorFee: Number | String;\n}\n\nconst SeasonConnection = Parse.Object.extend('Season');\nconst query = new Parse.Query(SeasonConnection);\n\nexport const seasonState = () => {\n  const [seasons, setSeasons] = useState<ISeason[]>([]);\n\n\n  useEffect(() => {\n    (async () => {\n      const query = new Parse.Query('Season')\n      const res = await query.find();\n      const ses = res.map((r) => ({\n        createdAt: r.createdAt,\n        startDate: r.get('startDate'),\n        endDate: r.get('endDate'),\n        visitorFee: r.get('visitorFee'),\n        id: r.id,\n        updatedAt: r.updatedAt,\n      }));\n      setSeasons(ses);\n    })()\n  }, []);\n\n  return {\n    seasons,\n    addSeason: async (season: ISeason) => {\n      try {\n        season.visitorFee = parseFloat(String(season.visitorFee));\n        const seasonConnection = new SeasonConnection();\n        const newSeason = await seasonConnection.save(season);\n        season.id = newSeason.id;\n        setSeasons([...seasons, season]);\n      } catch (error) {\n        alert('Failed to create new object, with error code: ' + error.message);\n      }\n    },\n    deleteSeason: async (id: string) => {\n      try {\n        const season = await query.get(id);\n        season.destroy();\n        const newSeasons = seasons\n          .filter((season) => season.id !== id);\n        setSeasons(newSeasons);\n      } catch (error) {\n        alert('Failed to delete: ' + error.message);\n      }\n    },\n    editSeason: async (season: ISeason) => {\n      try {\n        season.visitorFee = parseFloat(String(season.visitorFee));\n        const seasonConnection = new SeasonConnection();\n        await seasonConnection.save(season);\n        const newSeasons = seasons.map((s) => {\n          if (s.id === season.id) {\n            return season;\n          }\n          return s;\n        })\n        setSeasons(newSeasons);\n      } catch (error) {\n        alert('Failed to create new object, with error code: ' + error.message);\n      }\n\n    },\n  };\n};"]},"metadata":{},"sourceType":"module"}