{"ast":null,"code":"import _objectSpread from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/rob/personal/cra-test/src/Season/components/SeasonForm.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation AddSeason($startDate: String!, $endDate: String!, $visitorFee: Int) {\\n    addSeason(startDate: $startDate, endDate: $endDate, visitorFee: $visitorFee) {\\n      id,\\n      startDate,\\n      endDate,\\n      visitorFee,\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport React, { useEffect, useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport DatePicker from 'react-date-picker';\nimport { IoIosAddCircle } from 'react-icons/io';\nimport { Button, CardBody, FormGroup, Input, Label, ModalFooter, SlidePanelBody } from '../../app/components/Layout';\nimport { FILTER_SEASONS } from '../Season';\nvar endDate = new Date();\nendDate.setFullYear(new Date().getFullYear() + 1);\nvar blank = {\n  startDate: new Date(),\n  endDate: endDate,\n  id: '',\n  visitorFee: '7'\n};\nvar ADD_SEASON = gql(_templateObject());\nexport var SeasonForm = function SeasonForm(_ref) {\n  var initialData = _ref.initialData,\n      setSelected = _ref.setSelected;\n\n  var _useState = useState(blank),\n      _useState2 = _slicedToArray(_useState, 2),\n      season = _useState2[0],\n      setSeason = _useState2[1];\n\n  useEffect(function () {\n    if (initialData !== null) {\n      setSeason(initialData);\n    } else {\n      setSeason(blank);\n    }\n  }, [initialData]);\n  return React.createElement(Mutation, {\n    mutation: ADD_SEASON,\n    update: function update(cache, _ref2) {\n      var addSeason = _ref2.data.addSeason;\n      var c = cache.readQuery({\n        query: FILTER_SEASONS\n      });\n      console.log('cache', c);\n      var filterSeasons = c.filterSeasons;\n      var i = filterSeasons.findIndex(function (season) {\n        return season.id === addSeason.id;\n      });\n      var data = i === -1 ? filterSeasons.concat([addSeason]) : filterSeasons.map(function (season) {\n        return season.id === addSeason.id ? addSeason : season;\n      });\n      cache.writeQuery({\n        query: FILTER_SEASONS,\n        data: {\n          filterSeasons: data\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, function (addSeason, _ref3) {\n    var data = _ref3.data;\n    return React.createElement(SlidePanelBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Start date\"), React.createElement(DatePicker, {\n      value: season.startDate,\n      onChange: function onChange(v) {\n        var startDate = Array.isArray(v) ? v[0] : v;\n        setSeason(_objectSpread({}, season, {\n          startDate: startDate\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"End date\"), React.createElement(DatePicker, {\n      value: season.endDate,\n      onChange: function onChange(v) {\n        var endDate = Array.isArray(v) ? v[0] : v;\n        setSeason(_objectSpread({}, season, {\n          endDate: endDate\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Label, {\n      htmlFor: \"visitorFee\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Visitor fee\"), React.createElement(Input, {\n      name: \"visitorFee\",\n      id: \"visitorFee\",\n      value: String(season.visitorFee),\n      onChange: function onChange(e) {\n        return setSeason(_objectSpread({}, season, {\n          visitorFee: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Button, {\n      outline: true,\n      onClick: function onClick() {\n        return setSelected(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(Button, {\n      onClick: function onClick() {\n        console.log('season', season);\n        var variables = {\n          startDate: season.startDate,\n          endDate: season.endDate,\n          visitorFee: Number(season.visitorFee)\n        }; // season.id === ''\n        //   ? addSeason({ variables })\n        //   : editSeason({ variables, id: season.id })\n        //   ;\n\n        addSeason({\n          variables: variables\n        });\n        setSeason(blank);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(IoIosAddCircle, {\n      size: \"1rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), initialData === null ? 'Add' : 'Update')));\n  });\n};","map":{"version":3,"sources":["/home/rob/personal/cra-test/src/Season/components/SeasonForm.tsx"],"names":["gql","React","useEffect","useState","Mutation","DatePicker","IoIosAddCircle","Button","CardBody","FormGroup","Input","Label","ModalFooter","SlidePanelBody","FILTER_SEASONS","endDate","Date","setFullYear","getFullYear","blank","startDate","id","visitorFee","ADD_SEASON","SeasonForm","initialData","setSelected","season","setSeason","cache","addSeason","data","c","readQuery","query","console","log","filterSeasons","i","findIndex","concat","map","writeQuery","v","Array","isArray","String","e","target","value","variables","Number"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport React, {\n  FC,\n  useEffect,\n  useState,\n} from 'react';\nimport { Mutation } from 'react-apollo';\nimport DatePicker from 'react-date-picker';\nimport { IoIosAddCircle } from 'react-icons/io';\n\nimport {\n  Button,\n  CardBody,\n  FormGroup,\n  Input,\n  Label,\n  ModalFooter,\n  SlidePanelBody,\n} from '../../app/components/Layout';\nimport { FILTER_SEASONS } from '../Season';\nimport { ISeason } from '../seasonState';\n\ninterface IProps {\n  initialData: null | ISeason;\n  setSelected: any;\n}\n\nconst endDate = new Date();\nendDate.setFullYear(new Date().getFullYear() + 1);\nconst blank: ISeason = {\n  startDate: new Date(),\n  endDate,\n  id: '',\n  visitorFee: '7',\n};\n\nconst ADD_SEASON = gql`\n  mutation AddSeason($startDate: String!, $endDate: String!, $visitorFee: Int) {\n    addSeason(startDate: $startDate, endDate: $endDate, visitorFee: $visitorFee) {\n      id,\n      startDate,\n      endDate,\n      visitorFee,\n    }\n  }\n`;\n\nexport const SeasonForm: FC<IProps> = ({ initialData, setSelected }) => {\n  const [season, setSeason] = useState<ISeason>(blank);\n\n  useEffect(() => {\n    if (initialData !== null) {\n      setSeason(initialData);\n    } else {\n      setSeason(blank);\n    }\n  }, [initialData]);\n  return (\n    <Mutation\n      mutation={ADD_SEASON}\n      update={(cache, { data: { addSeason } }) => {\n        const c = cache.readQuery<any>({ query: FILTER_SEASONS });\n        console.log('cache', c);\n        const { filterSeasons } = c;\n        const i = filterSeasons.findIndex((season: any) => season.id === addSeason.id);\n        const data = i === -1\n          ? filterSeasons.concat([addSeason])\n          : filterSeasons.map((season: any) => season.id === addSeason.id ? addSeason : season);\n        cache.writeQuery({\n          query: FILTER_SEASONS,\n          data: { filterSeasons: data },\n        });\n      }}>\n      {(addSeason, { data }) => (\n        <SlidePanelBody>\n          <CardBody>\n            <FormGroup>\n              <Label>Start date</Label>\n              <DatePicker\n                value={season.startDate}\n                onChange={(v) => {\n                  const startDate = Array.isArray(v) ? v[0] : v;\n                  setSeason({\n                    ...season,\n                    startDate,\n                  })\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>End date</Label>\n              <DatePicker\n                value={season.endDate}\n                onChange={(v) => {\n                  const endDate = Array.isArray(v) ? v[0] : v;\n                  setSeason({\n                    ...season,\n                    endDate,\n                  })\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"visitorFee\">\n                Visitor fee\n          </Label>\n              <Input name=\"visitorFee\"\n                id=\"visitorFee\"\n                value={String(season.visitorFee)}\n                onChange={(e) => setSeason({\n                  ...season,\n                  visitorFee: e.target.value,\n                })} />\n            </FormGroup>\n\n          </CardBody>\n          <ModalFooter>\n            <Button\n              outline\n              onClick={() => setSelected(null)}>\n              Clear\n         </Button>\n\n            <Button\n              onClick={() => {\n                console.log('season', season);\n                const variables = { startDate: season.startDate, endDate: season.endDate, visitorFee: Number(season.visitorFee) };\n                // season.id === ''\n                //   ? addSeason({ variables })\n                //   : editSeason({ variables, id: season.id })\n                //   ;\n                addSeason({ variables });\n                setSeason(blank);\n              }}>\n              <IoIosAddCircle size=\"1rem\" />\n              {initialData === null ? 'Add' : 'Update'}\n            </Button>\n          </ModalFooter>\n        </SlidePanelBody>\n      )}\n    </Mutation>\n  )\n}"]},"metadata":{},"sourceType":"module"}