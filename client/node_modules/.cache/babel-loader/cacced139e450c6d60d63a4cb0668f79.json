{"ast":null,"code":"import _objectSpread from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/rob/personal/cra-test/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/rob/personal/cra-test/src/Season/components/SeasonForm.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation AddSeason($startDate: String!, $endDate: String!, $visitorFee: Number) {\\n    addSeason(startDate: $startDate, endDate: $endDate, visitorFee: $visitorFee) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport React, { useEffect, useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport DatePicker from 'react-date-picker';\nimport { IoIosAddCircle } from 'react-icons/io';\nimport { Button, CardBody, FormGroup, Input, Label, ModalFooter, SlidePanelBody } from '../../app/components/Layout';\nvar endDate = new Date();\nendDate.setFullYear(new Date().getFullYear() + 1);\nvar blank = {\n  startDate: new Date(),\n  endDate: endDate,\n  id: '',\n  visitorFee: 7\n};\nvar ADD_SEASON = gql(_templateObject());\nexport var SeasonForm = function SeasonForm(_ref) {\n  var initialData = _ref.initialData,\n      setSelected = _ref.setSelected;\n\n  var _useState = useState(blank),\n      _useState2 = _slicedToArray(_useState, 2),\n      season = _useState2[0],\n      setSeason = _useState2[1];\n\n  useEffect(function () {\n    if (initialData !== null) {\n      setSeason(initialData);\n    } else {\n      setSeason(blank);\n    }\n  }, [initialData]);\n  return React.createElement(Mutation, {\n    mutation: ADD_SEASON,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, function (addSeason, _ref2) {\n    var data = _ref2.data;\n    return React.createElement(SlidePanelBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Start date\"), React.createElement(DatePicker, {\n      value: season.startDate,\n      onChange: function onChange(v) {\n        var startDate = Array.isArray(v) ? v[0] : v;\n        setSeason(_objectSpread({}, season, {\n          startDate: startDate\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"End date\"), React.createElement(DatePicker, {\n      value: season.endDate,\n      onChange: function onChange(v) {\n        var endDate = Array.isArray(v) ? v[0] : v;\n        setSeason(_objectSpread({}, season, {\n          endDate: endDate\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Label, {\n      htmlFor: \"visitorFee\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Visitor fee\"), React.createElement(Input, {\n      name: \"visitorFee\",\n      id: \"visitorFee\",\n      value: String(season.visitorFee),\n      onChange: function onChange(e) {\n        return setSeason(_objectSpread({}, season, {\n          visitorFee: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      outline: true,\n      onClick: function onClick() {\n        return setSelected(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(Button, {\n      onClick: function onClick() {\n        console.log('season', season);\n        season.id === '' ? addSeason(season) : editSeason(season);\n        setSeason(blank);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(IoIosAddCircle, {\n      size: \"1rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), initialData === null ? 'Add' : 'Update')));\n  });\n};","map":{"version":3,"sources":["/home/rob/personal/cra-test/src/Season/components/SeasonForm.tsx"],"names":["gql","React","useEffect","useState","Mutation","DatePicker","IoIosAddCircle","Button","CardBody","FormGroup","Input","Label","ModalFooter","SlidePanelBody","endDate","Date","setFullYear","getFullYear","blank","startDate","id","visitorFee","ADD_SEASON","SeasonForm","initialData","setSelected","season","setSeason","addSeason","data","v","Array","isArray","String","e","target","value","console","log","editSeason"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport React, {\n  FC,\n  useEffect,\n  useState,\n} from 'react';\nimport { Mutation } from 'react-apollo';\nimport DatePicker from 'react-date-picker';\nimport { IoIosAddCircle } from 'react-icons/io';\n\nimport {\n  Button,\n  CardBody,\n  FormGroup,\n  Input,\n  Label,\n  ModalFooter,\n  SlidePanelBody,\n} from '../../app/components/Layout';\nimport { ISeason } from '../seasonState';\n\ninterface IProps {\n  // addSeason(season: ISeason): void;\n  // editSeason(season: ISeason): void;\n  initialData: null | ISeason;\n  setSelected: any;\n}\n\nconst endDate = new Date();\nendDate.setFullYear(new Date().getFullYear() + 1);\nconst blank: ISeason = {\n  startDate: new Date(),\n  endDate,\n  id: '',\n  visitorFee: 7,\n};\n\nconst ADD_SEASON = gql`\n  mutation AddSeason($startDate: String!, $endDate: String!, $visitorFee: Number) {\n    addSeason(startDate: $startDate, endDate: $endDate, visitorFee: $visitorFee) {\n      id\n    }\n  }\n`;\n\nexport const SeasonForm: FC<IProps> = ({ initialData, setSelected }) => {\n  const [season, setSeason] = useState<ISeason>(blank);\n\n  useEffect(() => {\n    if (initialData !== null) {\n      setSeason(initialData);\n    } else {\n      setSeason(blank);\n    }\n  }, [initialData]);\n  return (\n    <Mutation mutation={ADD_SEASON}>\n      {(addSeason, { data }) => (\n        <SlidePanelBody>\n          <CardBody>\n            <FormGroup>\n              <Label>Start date</Label>\n              <DatePicker\n                value={season.startDate}\n                onChange={(v) => {\n                  const startDate = Array.isArray(v) ? v[0] : v;\n                  setSeason({\n                    ...season,\n                    startDate,\n                  })\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>End date</Label>\n              <DatePicker\n                value={season.endDate}\n                onChange={(v) => {\n                  const endDate = Array.isArray(v) ? v[0] : v;\n                  setSeason({\n                    ...season,\n                    endDate,\n                  })\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"visitorFee\">\n                Visitor fee\n          </Label>\n              <Input name=\"visitorFee\"\n                id=\"visitorFee\"\n                value={String(season.visitorFee)}\n                onChange={(e) => setSeason({\n                  ...season,\n                  visitorFee: e.target.value,\n                })} />\n            </FormGroup>\n\n          </CardBody>\n          <ModalFooter>\n            <Button\n              outline\n              onClick={() => setSelected(null)}>\n              Clear\n         </Button>\n\n            <Button\n              onClick={() => {\n                console.log('season', season);\n                season.id === ''\n                  ? addSeason(season)\n                  : editSeason(season)\n                setSeason(blank);\n              }}>\n              <IoIosAddCircle size=\"1rem\" />\n              {initialData === null ? 'Add' : 'Update'}\n            </Button>\n          </ModalFooter>\n        </SlidePanelBody>\n      )}\n    </Mutation>\n  )\n}"]},"metadata":{},"sourceType":"module"}